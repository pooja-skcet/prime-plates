package com.example.demo.controller;
import com.example.demo.dto.UserDTO;
import com.example.demo.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

import jakarta.servlet.http.HttpSession;
@RestController
@CrossOrigin(origins = "http://localhost:3000")
@RequestMapping("/api/users")
public class UserController {
	

	
	    @Autowired
	    private UserService userService;

	    @PostMapping
	    public ResponseEntity<UserDTO> createUser(@RequestBody UserDTO userDTO) {
	        return ResponseEntity.ok(userService.createUser(userDTO));
	    }

	    @GetMapping("/{userId}")
	    public ResponseEntity<UserDTO> getUserById(@PathVariable Long userId) {
	        return ResponseEntity.ok(userService.getUserById(userId));
	    }

	    @GetMapping
	    public ResponseEntity<List<UserDTO>> getAllUsers() {
	        return ResponseEntity.ok(userService.getAllUsers());
	    }
	    
	    @PutMapping("/{id}")
	    public ResponseEntity<UserDTO> updateUser(@PathVariable Long id, @RequestBody UserDTO usersDTO) {
	        return ResponseEntity.ok(userService.updateUser(id, usersDTO));
	    }

	    @DeleteMapping("/{id}")
	    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
	        userService.deleteUser(id);
	        return ResponseEntity.noContent().build();
	    }
	    
	    
	    @PostMapping("/login")
	    public ResponseEntity<String> login(@RequestParam("username") String username, 
	                                         @RequestParam("password") String password, 
	                                         HttpSession session) {
	        // Replace with actual authentication logic
	        UserDTO user = userService.getUsername(username); // Fetch user by username
	        
	        if (user != null && user.getPassword().equals(password)) { // Simplistic password check
	            session.setAttribute("userId", user.getUserId()); // Store userId in session
	            return ResponseEntity.ok("Login successful");
	        } else {
	            return ResponseEntity.status(401).body("Invalid credentials");
	        }
	    }
	
}
